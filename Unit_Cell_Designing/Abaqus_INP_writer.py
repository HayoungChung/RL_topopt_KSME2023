# -*- coding: utf-8 -*-
"""
Created on Fri Nov 19 14:34:38 2021

@author: nbrow
"""
import numpy as np
def INP_writer(Elements, Nodes,E_X,E_Y,UX,UY):

    with open('Test_Abaqus.inp','w') as f:
        # Writing the Job Info:
        f.write('''*Heading
Python Written Abaqus INP File
**Job name: Run_Job Model name: Model-1
** Generated by: Abaqus/CAE 2020
*Preprint, echo=NO, model=NO, history=NO, contact=No
**
''')#Incorporate the Parts 
        f.write('''PARTS
**
*Part, name=Body_part
*Node
''')
        for i in range(0,len(Nodes)):
            f.write(' {}, {}, {}\n'.format(int(Nodes[i,2]),Nodes[i,0],Nodes[i,1]))
        f.write('''*Element, type=CPS4R\n''')
        for i in range(0,len(Elements)):
            f.write(' {}, {}, {}, {}, {}\n'.format(int(Elements[i,4]),int(Elements[i,0]),int(Elements[i,1]),int(Elements[i,2]),int(Elements[i,3])))
        f.write('''*Nset, nset=Set-1, internal\n''')
        for i in range(0,len(Nodes)):
            if i!=len(Nodes)-1:
                f.write('{}, '.format(int(Nodes[i,2])))
            else:
                f.write('{}\n'.format(int(Nodes[i,2])))
            if i%15==0 and i!=0 and i!=len(Elements)-1:
                f.write('\n')
        f.write('*Elset, elset=Set-1, internal\n')
        for i in range(0,len(Elements)):
            if i!=len(Elements)-1:
                f.write('{}, '.format(int(Elements[i,4])))
            else:
                f.write('{}\n'.format(int(Elements[i,4])))
            if i%15==0 and i!=0 and i!=len(Elements)-1:
                f.write('\n')
        f.write('** Section: Section-1\n')
        f.write('''*Solid Section, elset=Set-1, material=Material-1
*End Part
**
**
** ASSEMBLY
**
*Assembly, name=Assembly
**
*Instance, name=Part-1-1, part=Body_part
*End Instance
**
''')    
        El_Len=[]
        Node_Len=[]
        f.write('*Nset, nset=Lower_Edge, instance=Part-1-1\n')
        for i in range(0,(E_X*2*UX)+1):
            if i==0:
                f.write('{}'.format(int(Nodes[i,2])))
                Node_Len=np.append(Node_Len,int(Nodes[i,2]))
            if i!=0 and int(Nodes[i,2])<=(E_X*UX*2)+1:
                f.write(', {}'.format(int(Nodes[i,2])))
                Node_Len=np.append(Node_Len,int(Nodes[i,2]))
            if i%10==0 and i!=0:
                f.write('\n')
        f.write('\n*Elset, elset=Lower_Edge, instance=Part-1-1\n')
        for i in range(0,(E_X*2*UX)):
            if i==0:
                f.write('{}'.format(int(Elements[i,4])))
                El_Len=np.append(El_Len,int(Elements[i,4]))
            if i!=0 and int(Elements[i,4])<=(E_X*2*UX):
                f.write(', {}'.format(int(Elements[i,4])))
                El_Len=np.append(El_Len,int(Elements[i,4]))
            if i%10==0 and i!=0:
                f.write('\n')
        f.write('\n*Nset, nset=Upper_Edge, internal, instance=Part-1-1\n')
        for i in range(0,len(Node_Len)+1):
            if i==0:
                f.write('{}'.format(int(Nodes[-len(Node_Len)+i,2])))
            if i!=0:
                f.write(', {}'.format(int(Nodes[-1-len(Node_Len)+i,2])))
            if i%10==0 and i!=0:
                f.write('\n')
                
        f.write('''\n*End Assembly
**
** MATERIALS
**
*Material, name=Material-1
*Density
1e-05,
*Elastic
 1e+06., 0.3\n''')
        f.write('''**
** INTERACTION PROPERTIES
**
*Surface Interaction, name=IntProp-1
1.,
*Friction, slip tolerance=0.005
0.5,
*Surface Behavior, pressure-overclosure=HARD
**
** INTERACTIONS
**
** ----------------------------------------------------------------
**
** STEP: Force_Applied_Step
**
*Step, name=Force_Appled_Step, nlgeom=YES
*Static
0.25, 1., 1e-05, 0.25
**
** BOUNDARY CONDITIONS
**
** Name: BC_1 Type: Symmetry/Antisymmetry/Encastre
*Boundary
Lower_Edge, PINNED
**
** LOADS
**
** Name:Load-1 Type:Concentrated force
*Cload
Upper_Edge, 2, -{}'''.format(1e6/len(Node_Len)))
        f.write('''\n**
** OUTPUT REQUESTS
**
*Restart, write, frequency=0
**
** FIELD OUTPUT: F-Output-1
**
*Output, field, variable=PRESELECT
**
** HISTORY OUTPUT: H-Output-1
**
*Output, history, variable=PRESELECT
*End Step''')

    